let f = |x: int| -> int { x + 1 };
f(3)

memory: List[byte] = [0] * ARENA_SIZE
heap: List[byte] = [0] * HEAP_ARENA_SIZE
stack_pointer: int = 0
environment: Dict[str, byte] = {}

eval ->
    eval let ->
        eval lambda def ->
            START lambda$0
            eval body ->
                LOAD x
                PUSH ADD x 1
                RET
        <-
    STORE f lambda$0
    eval ->
        eval application ->
            LOAD f (=lambda$0)
            eval (arguments) ->
                eval literal ->
                    PUSHCONST 3
                <-
            CALL f
            <-
        <-
    <-
<-

START lambda$0
LOAD x
PUSH ADD x 1
RET
STORE f lambda$0
LOAD f
PUSHCONST 3
CALL lambda$0


let f = |s: string| -> string { s == "test" };
f("test")

eval ->
    eval let ->
        eval lambda def ->
            START lambda$0
            eval body ->
                LOAD x
                PUSH ADD x 1
                RET
        <-
    STORE f lambda$0
    eval ->
        eval application ->
            LOAD f (=lambda$0)
            eval (arguments) ->
                eval literal ->
                    PUSHCONST 3
                <-
            CALL f
            <-
        <-
    <-
<-

START lambda$0
LOAD s
PUSH EQ